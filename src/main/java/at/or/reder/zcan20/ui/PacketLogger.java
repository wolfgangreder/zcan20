/*
 * Copyright 2019 Wolfgang Reder.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package at.or.reder.zcan20.ui;

import at.or.reder.zcan20.PacketSelector;
import at.or.reder.zcan20.ZCAN;
import at.or.reder.zcan20.packet.Packet;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.time.LocalDateTime;
import javax.swing.JFrame;
import org.apache.commons.cli.CommandLine;
import org.openide.util.Exceptions;

public class PacketLogger extends JFrame
{

  private enum State
  {
    STOPPED,
    ARMED,
    RUNNING;
  }

  private State state = null;
  private final PacketTableModel model = new PacketTableModel();
  private PacketSource source;
  private PacketSelector trigger;
  private PacketSelector filter1;
  private PacketSelector filter2;

  public PacketLogger(CommandLine cmdLine)
  {
    initComponents();
    setState(State.STOPPED);
  }

  private InetSocketAddress getSocketAddress()
  {
    String str = edAddress.getText();
    String[] parts = str.split(":");
    return new InetSocketAddress(parts[0],
                                 Integer.parseInt(parts[1]));
  }

  private boolean isStartPossible()
  {
    if (state != State.RUNNING) {
      if (rdTriggered.isSelected()) {
        PacketSelector selector = packetConditionPanel1.getSelector();
        return selector != null;
      } else {
        return true;
      }
    }
    return false;
  }

  private void setState(State state)
  {
    this.state = state;
    lbState.setText(state.name());
    btStart.setEnabled(isStartPossible());
    btStop.setEnabled(state != State.STOPPED);
    btClear.setEnabled(state == State.STOPPED);
    rdFree.setEnabled(state == State.STOPPED);
    rdTriggered.setEnabled(state == State.STOPPED);
    lbNumPackets.setText(Integer.toString(model.getRowCount()));
  }

  private void doStart()
  {
    if (source != null) {
      try {
        source.close();
      } catch (IOException ex) {
        Exceptions.printStackTrace(ex);
      }
      source = null;
    }
    InetSocketAddress address = getSocketAddress();
    if (address.getAddress().isMulticastAddress()) {
      source = new MulticastPacketSource(address);
    }
    State s = state;
    if (source != null) {
      try {
        source.addPacketListener(this::onPacket);
        if (rdTriggered.isSelected()) {
          s = State.ARMED;
          trigger = packetConditionPanel1.getSelector();
        } else {
          s = State.RUNNING;
          trigger = null;
        }
        filter1 = packetConditionPanel2.getSelector();
        filter2 = packetConditionPanel3.getSelector();
        source.start();
      } catch (IOException ex) {
        Exceptions.printStackTrace(ex);
      }
    }
    setState(s);
  }

  private void doStop()
  {
    State s = state;
    if (source != null) {
      try {
        source.close();
      } catch (IOException ex) {

      }
      trigger = null;
      s = State.STOPPED;
      source = null;
    }
    setState(s);
  }

  private void doClear()
  {
    lbNumPackets.setText("0");
    model.clear();
  }

  private boolean filter(Packet packet)
  {
    if (filter1 != null) {
      return filter1.matches(packet);
    }
    if (filter2 != null) {
      return filter2.matches(packet);
    }
    return true;
  }

  private void onPacket(ZCAN dev,
                        Packet packet)
  {
    if (model.getRowCount() >= 500) {
      doStop();
      return;
    }
    if (trigger == null || trigger.matches(packet)) {
      trigger = null;
      setState(State.RUNNING);
      if (filter(packet)) {
        model.appendPacket(LocalDateTime.now(),
                           packet);
      }
      if (model.getRowCount() >= 500) {
        doStop();
      }
      lbNumPackets.setText(Integer.toString(model.getRowCount()));
    }
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of
   * this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    buttonGroup1 = new javax.swing.ButtonGroup();
    jTabbedPane1 = new javax.swing.JTabbedPane();
    jPanel1 = new javax.swing.JPanel();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    jLabel3 = new javax.swing.JLabel();
    javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
    cANBuilderPanel1 = new at.or.reder.zcan20.ui.CANBuilderPanel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Packet Logger");

    jLabel1.setText("Address");

    edAddress.setText("230.1.1.1:14373");
    edAddress.setToolTipText("");

    buttonGroup1.add(rdFree);
    rdFree.setText("Free running");
    rdFree.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        rdFreeActionPerformed(evt);
      }
    });

    jLabel2.setText("Mode");

    buttonGroup1.add(rdTriggered);
    rdTriggered.setSelected(true);
    rdTriggered.setText("Triggered");
    rdTriggered.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        rdTriggeredActionPerformed(evt);
      }
    });

    packetConditionPanel1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        packetConditionPanel1ActionPerformed(evt);
      }
    });

    btStart.setText("Start");
    btStart.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btStartActionPerformed(evt);
      }
    });

    btStop.setText("Stop");
    btStop.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btStopActionPerformed(evt);
      }
    });

    lbState.setText("jLabel3");

    btClear.setText("Clear");
    btClear.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        btClearActionPerformed(evt);
      }
    });

    jLabel3.setText("Filter");

    lbNumPackets.setText("jLabel4");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(jLabel2)
              .addComponent(jLabel1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(edAddress)
                  .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addComponent(rdTriggered)
                      .addComponent(rdFree)
                      .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btStart)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btStop)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbState))
                      .addComponent(lbNumPackets))
                    .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
              .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                  .addComponent(packetConditionPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(packetConditionPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addComponent(packetConditionPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(418, Short.MAX_VALUE))))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(17, 17, 17)
            .addComponent(jLabel3)
            .addGap(0, 0, Short.MAX_VALUE))))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(edAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(rdFree))
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(rdTriggered)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(packetConditionPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(packetConditionPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(packetConditionPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(jPanel1Layout.createSequentialGroup()
            .addGap(83, 83, 83)
            .addComponent(jLabel3)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(btStart)
          .addComponent(btStop)
          .addComponent(lbState)
          .addComponent(btClear))
        .addGap(18, 18, 18)
        .addComponent(lbNumPackets)
        .addContainerGap(227, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab("Settings", jPanel1);

    jTable1.setModel(model);
    jScrollPane1.setViewportView(jTable1);

    jTabbedPane1.addTab("Data", jScrollPane1);
    jTabbedPane1.addTab("Packet Builder", cANBuilderPanel1);

    getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void btStartActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btStartActionPerformed
  {//GEN-HEADEREND:event_btStartActionPerformed
    doStart();
  }//GEN-LAST:event_btStartActionPerformed

  private void btStopActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btStopActionPerformed
  {//GEN-HEADEREND:event_btStopActionPerformed
    doStop();
  }//GEN-LAST:event_btStopActionPerformed

  private void btClearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btClearActionPerformed
  {//GEN-HEADEREND:event_btClearActionPerformed
    doClear();
  }//GEN-LAST:event_btClearActionPerformed

  private void rdFreeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdFreeActionPerformed
  {//GEN-HEADEREND:event_rdFreeActionPerformed
    setState(state);
  }//GEN-LAST:event_rdFreeActionPerformed

  private void rdTriggeredActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdTriggeredActionPerformed
  {//GEN-HEADEREND:event_rdTriggeredActionPerformed
    setState(state);
  }//GEN-LAST:event_rdTriggeredActionPerformed

  private void packetConditionPanel1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_packetConditionPanel1ActionPerformed
  {//GEN-HEADEREND:event_packetConditionPanel1ActionPerformed
    setState(state);
  }//GEN-LAST:event_packetConditionPanel1ActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private final javax.swing.JButton btClear = new javax.swing.JButton();
  private final javax.swing.JButton btStart = new javax.swing.JButton();
  private final javax.swing.JButton btStop = new javax.swing.JButton();
  private javax.swing.ButtonGroup buttonGroup1;
  private at.or.reder.zcan20.ui.CANBuilderPanel cANBuilderPanel1;
  private final javax.swing.JTextField edAddress = new javax.swing.JTextField();
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JTabbedPane jTabbedPane1;
  private final javax.swing.JTable jTable1 = new javax.swing.JTable();
  private final javax.swing.JLabel lbNumPackets = new javax.swing.JLabel();
  private final javax.swing.JLabel lbState = new javax.swing.JLabel();
  private final at.or.reder.zcan20.ui.PacketConditionPanel packetConditionPanel1 = new at.or.reder.zcan20.ui.PacketConditionPanel();
  private final at.or.reder.zcan20.ui.PacketConditionPanel packetConditionPanel2 = new at.or.reder.zcan20.ui.PacketConditionPanel();
  private final at.or.reder.zcan20.ui.PacketConditionPanel packetConditionPanel3 = new at.or.reder.zcan20.ui.PacketConditionPanel();
  private final javax.swing.JRadioButton rdFree = new javax.swing.JRadioButton();
  private final javax.swing.JRadioButton rdTriggered = new javax.swing.JRadioButton();
  // End of variables declaration//GEN-END:variables
}
